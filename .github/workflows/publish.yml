name: 'publish'

on:
  push:
    branches:
      - release

jobs:
  build-tauri:
    permissions:
      contents: write
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install
      - uses: actions/cache@v2
        name: Setup vite cache
        with:
          path: ./node_modules/.vite
          key: ${{ runner.os }}-vite-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-vite-

      - uses: dtolnay/rust-toolchain@stable
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            src-tauri/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run tauri build
        shell: bash
        env:
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        run: |
          rm -rf src-tauri/target/release/bundle
          pnpm tauri build

      - name: Get Release Version
        id: get_release_version
        shell: bash
        run: |
          echo "RELEASE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV
          echo "IS_PRE_RELEASE=$(node -p "require('./package.json').version.includes('-')")" >> $GITHUB_ENV

      - name: Generate release.json
        shell: bash
        run: |
          pnpm gen-release
          echo "RELEASE_NOTES=$(node -p "require('./release.json').notes")" >> $GITHUB_ENV

      - name: Upload to Aliyun OSS
        run: |
          aliyun configure set --profile tauri --mode AK --region ${{ vars.ALIYUN_REGION }} --access-key-id ${{ secrets.ALIYUN_ACCESS_KEY_ID }} --access-key-secret ${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}
          aliyun oss cp ./release.json oss://prompt-studio/release.json --profile tauri -e oss-cn-guangzhou.aliyuncs.com -f
          aliyun oss cp src-tauri/target/release/bundle/nsis/ oss://prompt-studio/download/ --profile tauri -e oss-cn-guangzhou.aliyuncs.com -r -f

      - uses: ncipollo/release-action@v1
        with:
          artifacts: src-tauri/target/release/bundle/nsis/*
          tag: v${{ env.RELEASE_VERSION }}
          name: v${{ env.RELEASE_VERSION }}
          body: ${{ env.RELEASE_NOTES }}
          prerelease: ${{ env.IS_PRE_RELEASE }}
